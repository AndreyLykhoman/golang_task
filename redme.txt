Ниже представлено описание файлов и кода в них.

пакет "main"

create_db_tables.go - Файл содержит создания таблиц баз данных. Содержит сдедующий код редставленный в виде функций:

 main() - функция входа в этом файле где вызываются функця создания таблиц CreateDatabasesTables(), функция db.Open()
          пакета "db" для открытия соединения с базой данных, а так же метод SetTopicWithTags(topic string, tags []string)
          структуры mysq из пакета  "db" создания новой категории с тегами

CreateDatabasesTables() -  Строит таблицы в базе данных используя метод mysq.CreateTable для каждой таблицы

GetTopicToTagTableFields(), GetTopicToArticleTableFields(),
GetSiteTableFields(), GetTopicTableFields(),                 - методы что возвращают структуру таблиц в виде слайса
GetTagTableFields(), GetArticleTableFields(),                  структур  TabelsFiels  пакта "db"


parse_post.go - файл служит для запуска процесса парсинга статей на сайтах. Имеет 2 метода main и postScrape:

main() -  выбирает из базы список удаленных сайтов что возвращаются в виде слайса структуры RemoteSite пакета
          "site". содержит в себе WaitGroup пакета sync для синхронизации go рутин. Go рутины создаются
          по количеству удаленных сайтов и сообщают о своем завершении. Данный поток ждет выполнение всех его go рутин.
          каждая go рутина содержит в себе функцию postScrape(site site.RemoteSite)


postScrape(site site.RemoteSite) - Функция получает список статей переданного ему удаленного сайта при помощи метода
                                   GetListArticles() структуры  site.RemoteSite. Возвращается экземпляр структуры
                                   ArticlesList пакета "article". Данная структура пр ипомощи метода GetPost() получайт
                                   слайс структур Article пакета "article". Данные структуры  передаются в go рутину, где
                                    вместе с экземпляром соединения с базой данных передаются на вход функции
                                    WorkWithArticle пакета "parser". Содержит свою WaitGroup



index.go - (еще не реализован) Файл выполняющий функции роутинга и обработчика http запросов. Получает данные о необходимой категории
           статьи которой нужно вернуть. Так же вызывает методы файла redmitask.go

getdata.go -(еще не реализован)  Файл получает вводные данные от index.go Вызывает необходимые методы струтур в паетах db, articles.
             формирует json  объект который будет возвращен как ответ.

redmitask.go -(еще не реализован)  Служит для инициалзации периодического запуска операций. Будет использовать gocron
               github.com/jasonlvhit/gocron или time https://golang.org/pkg/time/




пакет article ("parser/entity/articles")

article.go - файл содержит объявление структуры Article c Get/Set методами. Является отобржением статьи

articlesList - содержит струтуру ArticlesList c с методами добавления  Article и получения слайса всех Article

topic.go - в фале хранится струкура Topic описывающая Раздел с принадлежащими ему тегами.

topicslist.go -  струткура TopicsList. Отображает список разделов. содержит метод для добавления раздела в список, а
                 так же метод позволяющий определить категорию переданного ему текста. На данный момент данный метод
                 ищет количество вхождений имен категорий в переданны текст. Это будет изменено следующим образом:
                 переданный текст будет разбит на слова и пропущен через stack (фактическ иструктуру содеращую в себе
                 map(string)int и котролирующую уникальность данных с инкрементом). после будет поределено пересечение
                 steck'а  слов и тегов категории. на выходе получется все та же map(string)int. Только числа будут
                 означать вес определяемый суммой совпадаемых тегов. Топик имеющий самое большой значение являться
                 категорией статьи.


пакет db ("parser/entity/db")

db.go - интерфес базы данных. Позволяет выбрать с Базы данных список категорий и вернуть их в article.TopicsList

mysql.go -  Содержит в себе структуру для работы с базой данных mysql и ее полями. Содержит константы что помогают
            настроить соединение с Базой данных и формировать запросы.  Так же функцию Open() которая возвращает экземпляр
            струтуры Mysql с открытым соединениме

            TabelsFiels - струтура описывающая поле в таблице. Определяет тип поля и его параметры
            Mysql - структура что позволяет работать с базой данных. Имеет в себе эеземпляр sql.DB. Даная структура
                    имеет следующие методы:

            Close() - закрывает соединение
            Query(query string) - выполняет переданный запрос
            CreateTable(name string, fields []TabelsFiels, key string ,primary_key... string )  - создает таблицу в Базе
            GetTopics() - возвращет список категорий с тегами в виде article.TopicsList(метод не доконца дописан)
            GetRemoteSiteSlice() возвращает слайс удаленный сайтов в site.RemoteSite
            SetTopicWithTags(topic string, tags []string) - сохраняет категорию е его теги

            Данный файл еще будет содержать методы структуры Mysql:  добавления сайтов и извлечения статей.


пакет parser ("parser/entity/parser")

line.go - parser.Line структура то отображает строку текста.
linelist.go - содержит структуру LinesList что отображает список строк. Содержит методы:
    SortLinesBiggestFromLess() - сортирует строки алгоритмом быстрой сортировки от большего к меньшему
    getLinesValue() - взвращает значение строки
    GetNBiggest(N int)  - возвращает новый LinesList содержащий N первых елементов старого

html.go - предназначен для работы с полученно страницей статьи. Находит основной текст статьи
          и передает его на категоризацию. содержит HTML струтуру, что содержит страницу в себе.
          струтура имеет методы:

          clearHtml() (HTML) - очищает страницу от лишних пробелов, знаков переноса и разбивает на строки/
          SplitBy(sep string)(ls LinesList) - разбивает текст на строки по разделителю и возвращает LinesList

          Функции файла для работы со страницей:

           SelectorRemove(d *goquery.Document, selectors [] string) *goquery.Document - принимает на вход документ
                        *goquery.Document и  слайс селекторов на удаление. рекурсивно удаляет селекторы. Возвращает
                        документ *goquery.Document без указанных селекторов.

           WorkWithArticle( article *article.Article,  db db.DB)  - принимает на вход статью article.Article и экземпляр
                                                                    интерфейса db.DB. Содержит в себе вызов всех
                                                                    вышеперечисленных методов. Функция выпоняет  процесс
                                                                    выделения статьи и передачу на его категоризирование.


пакет "site" ("parser/entity/site")

site.go -  содержит структуру RemoteSite. Что отображает  себе адресс сайта и селектор позволяющий получить
           ссылку на статью. структура имеет Get/Set методы и метод
           GetListArticles() article.ArticlesList - получает список всех ссылок на статьи и выдает их в ArticlesList





